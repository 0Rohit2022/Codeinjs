// const express = require("express");
// const port = 8000;
// const app = express();


// app.get("/", (req, res) => {
//     res.send('Hello World from the get request');
// });

// app.post("/home", (req, res) => {
//     res.send("Hello world from the post request");
// });

// app.listen(port, () => {
//     console.log(`Server is running on the port no. ${port}`);
// })


/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
  const express = require("express");
  const bodyParser = require("body-parser");
  const fs = require("fs");
  const path = require("path");
  const port = 3000;


  const app = express();

  //This is the Middleware to parse the json request body 
  app.use(bodyParser.json());

  //Arrays to store todo Item 
  let todos = [];

  //Below is the helper function to save the todos in a file
  function saveTodoasaFile() {
    const filepath = path.join(__dirname, 'todos.json');
    fs.writeFileSync(filepath, JSON.stringify(todos), 'utf-8');
  }


  //The below is the post request to save the todo item inside a file
  app.post("/todos", (req, res) => {
    const {title , description} = req.body;
    const newtodo = {
      id : todos.length + 1,
      title, 
      description
    };
    todos.push(newtodo);
    saveTodoasaFile();
    res.status(201).json({id : newtodo.id});
  })

  app.listen(port, (req, res) => {
    console.log(`Server is running on the port no. ${port}`);
  })

  module.exports = app;